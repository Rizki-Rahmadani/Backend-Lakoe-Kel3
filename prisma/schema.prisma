generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @unique @default(cuid())
  email        String       @unique
  phone_number String?      @unique
  fullname     String
  password     String
  role_id      Roles?       @relation(fields: [rolesId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  profile_id   Profiles?
  profilesId   String?
  rolesId      String?
  Carts        Carts[]
  Cart_items   Cart_items[]
  Invoices     Invoices[]
  
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  store        Stores?      @relation
}

model Profiles {
  id         String     @id @unique @default(cuid())
  user_id    String     @unique
  locations  Location[]
  User       User       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locationId String     @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Roles {
  id        String   @id @unique @default(cuid())
  name      String?
  User      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id            String       @id @unique @default(cuid())
  name          String
  url           String       @unique
  description   String?
  attachments   String[]
  is_active     Boolean?     @default(false)
  variants      Variants[]
  price         Int?
  sku           String?
  stock         Int?
  width         Int?
  length        Int?
  height        Int?
  weight        Int?
  minimum_order Int?
  store_id      Stores      @relation(fields: [storesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storesId      String
  Categories    Categories[]
  order         Orders[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Stores {
  id                    String                  @id @unique @default(cuid())
  name                  String
  username              String                  @unique
  slogan                String?
  description           String?
  domain                String?
  logo_attachment       String?
  banner_attachment     String?
  Product               Product[]
  bank_accounts         bank_accounts[]
  Location              Location[]
  Carts                 Carts[]
  Cart_items            Cart_items[]
  Stores_on_decorations Stores_on_decorations[]
  Operation_hours       Operation_hours[]
  Message_templates     Message_templates[]
  Orders                Orders[]

  Payments              Payments[]

  Transaction           Transaction[]

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  user                  User                    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId                String                  @unique
  invoice               Invoices[]
}

model Orders {
  id            String   @id @unique @default(cuid())
  order_id      String?   @unique
  draft_order_id String?
  receiver_name String?
  origin_email  String?
  destination_email String?
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  biteship_order_id String?   @unique
  midtrans_order_id String?   @unique
  invoiceId     String?
  productId     String?   
  biteship_tracking_link  String?
  storeId       String?    
  locationId    String?   
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  invoice   Invoices?  @relation(fields: [invoiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  store    Stores?   @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  location Location? @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}


model bank_accounts {
  id          String        @id @unique @default(cuid())
  bank        String
  acc_number  String
  acc_name    String
  store_id    Stores?       @relation(fields: [storesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storesId    String?
  transaction Transaction[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Location {
  id                   String    @id @unique @default(cuid())
  name                 String
  address              String
  postal_code          String
  city_district        String
  store_id             Stores?   @relation(fields: [storesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profile_id           Profiles? @relation(fields: [profilesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orders               Orders[]
  is_main_location     Boolean?  @default(false)
  longitude            String
  latitude             String
  storesId             String?
  profilesId           String?
  biteship_location_id String?
  biteship_area_id     String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Variant_option_values {
  id              String                        @id @unique @default(cuid())
  sku             String
  weight          Int
  stock           Int
  price           Int
  is_active       Boolean                       @default(false)
  variant_options VariantOptionValueToOptions[]

  Cart_items Cart_items[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@unique([sku])
}

model Variant_options {
  id             String                        @id @unique @default(cuid())
  name           String
  variant_id     Variants                      @relation(fields: [variantsId], references: [id], onDelete: Cascade)
  variant_values VariantOptionValueToOptions[]

  variantsId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model VariantOptionValueToOptions {
  variant_option_value_id String
  variant_option_id       String
  variant_option_value    Variant_option_values @relation(fields: [variant_option_value_id], references: [id], onDelete: Cascade)
  variant_option          Variant_options       @relation(fields: [variant_option_id], references: [id], onDelete: Cascade)

  @@id([variant_option_value_id, variant_option_id])
}

model Variants {
  id              String            @id @unique @default(cuid())
  name            String
  is_active       Boolean           @default(false)
  product_id      Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  Variant_options Variant_options[]
  productId       String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Categories {
  id        String       @id @unique @default(cuid())
  name      String
  icon      String?
  products  Product[]
  parentId  String?
  parent    Categories?  @relation("CategoryParent", fields: [parentId], references: [id])
  children  Categories[] @relation("CategoryParent")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Carts {
  id         String       @id @unique @default(cuid())
  prices     Int
  discount   Int?
  user_id    User         @relation(fields: [userId], references: [id])
  store_id   Stores       @relation(fields: [storesId], references: [id])
  userId     String
  storesId   String
  Cart_items Cart_items[]
  Invoices   Invoices[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Cart_items {
  id                      String                @id @unique @default(cuid())
  qty                     Int
  price                   Int
  cart_id                 Carts                 @relation(fields: [cartsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  store_id                Stores                @relation(fields: [storesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  variant_option_value_id Variant_option_values @relation(fields: [variant_option_valuesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartsId                 String
  userId                  String
  storesId                String
  variant_option_valuesId String
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
}

model Invoices {

  id                   String                 @id @unique @default(cuid())
  prices               Int
  status               String                @default("pending")
  receiver_city        String
  receiver_province    String
  receiver_district    String
  receiver_phone       String
  receiver_name        String
  receiver_postalCode  String
  receiver_detailAddress String
  receiver_email       String
  order_id             String?

  receiver_biteship_area_id String?

  cart_id              Carts?                  @relation(fields: [cartsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  invoice_number       String?
  store_id             Stores         @relation(fields: [storesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storesId             String
  user_id              User?                   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  payment_id           Payments?              @relation(fields: [paymentsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courier_id           Couriers?
  cartsId              String?
  userId               String? 
  paymentsId           String?                 @unique
  courierId            String?
  orders               Orders[]
  Confirmation_payment Confirmation_payment[]
  Invoice_histories    Invoice_histories[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
}

model Confirmation_payment {
  id         String   @id @unique @default(cuid())
  amount     Int
  bank       String
  invoice_id Invoices @relation(fields: [invoicesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  invoicesId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Invoice_histories {
  id         String    @id @unique @default(cuid())
  status     String    @default("pending")
  invoice_id Invoices  @relation(fields: [invoicesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime? @default(now())
  invoicesId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Payments {

  id                   String    @id @unique @default(cuid())
  bank                 String
  amount               Int
  status               String @default("pending")
  invoice_id           Invoices? @relation
  store_id              Stores     @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  midtrans_transaction_id String?
  storeId               String
  invoicesId           String?    @unique
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

}

model Couriers {
  id                   String   @id @unique @default(cuid())
  courier_code         String
  courier_service_name String
  courier_service_code String
  price                Int
  invoice_id           Invoices @relation(fields: [invoicesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  order_id             String
  invoicesId           String  @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Decoration {
  id        String   @id @unique @default(cuid())
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stores_on_decorations {
  id        String   @id @unique @default(cuid())
  store_id  Stores   @relation(fields: [storesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storesId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Operation_hours {
  id        String   @id @unique @default(cuid())
  day       String
  open_at   String
  close_at  String
  is_off    Boolean
  store_id  Stores   @relation(fields: [storesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storesId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message_templates {
  id        String   @id @unique @default(cuid())
  name      String
  content   String
  store_id  Stores   @relation(fields: [storesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storesId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id        String         @id @unique @default(cuid())
  name      String
  type      String
  status    String         @default("pending")
  amount    Int
  bankId    String?
  bank      bank_accounts? @relation(fields: [bankId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storeId   String
  orderId   String?        @unique
  store     Stores         @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}
